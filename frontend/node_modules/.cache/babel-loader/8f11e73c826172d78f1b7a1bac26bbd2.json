{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\einst\\\\Documents\\\\frontend\\\\src\\\\components\\\\NewStudentModal.js\";\n\n/*\r\nthe only state prop we’re creating is the modal’s state in order to check whether it must be \r\nopen or closed.\r\n\r\nThe toggle function (the one our form receives as param) will switch the current modal’s value \r\nto the opposite every time it’s called.\r\n\r\nIn the render function, we’re first checking if a create boolean was passed as param from the \r\nparent caller to decide if the button is for editing or creating action.\r\n\r\nThe buttons are created dynamically depending on what the parent said to us.\r\n\r\nThen, the Modal component can be mounted upon these conditions further down. Pay attention to \r\nwhere we’re placing the <NewStudentForm /> component. \r\n\r\n\r\n\r\n\r\n\r\n*/\nimport React, { Component, Fragment } from \"react\";\nimport { Button, Modal, ModalHeader, ModalBody } from \"reactstrap\";\nimport NewStudentForm from \"./NewStudentForm\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nclass NewStudentModal extends Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      modal: false\n    };\n\n    this.toggle = () => {\n      this.setState(previous => ({\n        modal: !previous.modal\n      }));\n    };\n  }\n\n  render() {\n    const create = this.props.create;\n    var title = \"Editing Student\";\n\n    var button = /*#__PURE__*/_jsxDEV(Button, {\n      onClick: this.toggle,\n      children: \"Edit\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 53,\n      columnNumber: 18\n    }, this);\n\n    if (create) {\n      title = \"Creating New Student\";\n      button = /*#__PURE__*/_jsxDEV(Button, {\n        color: \"primary\",\n        className: \"float-right\",\n        onClick: this.toggle,\n        style: {\n          minWidth: \"200px\"\n        },\n        children: \"Create New\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 58,\n        columnNumber: 9\n      }, this);\n    }\n\n    return /*#__PURE__*/_jsxDEV(Fragment, {\n      children: [button, /*#__PURE__*/_jsxDEV(Modal, {\n        isOpen: this.state.modal,\n        toggle: this.toggle,\n        children: [/*#__PURE__*/_jsxDEV(ModalHeader, {\n          toggle: this.toggle,\n          children: title\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 73,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(ModalBody, {\n          children: /*#__PURE__*/_jsxDEV(NewStudentForm, {\n            resetState: this.props.resetState,\n            toggle: this.toggle,\n            student: this.props.student\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 76,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 75,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 72,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 70,\n      columnNumber: 7\n    }, this);\n  }\n\n}\n\nexport default NewStudentModal;","map":{"version":3,"sources":["C:/Users/einst/Documents/frontend/src/components/NewStudentModal.js"],"names":["React","Component","Fragment","Button","Modal","ModalHeader","ModalBody","NewStudentForm","NewStudentModal","state","modal","toggle","setState","previous","render","create","props","title","button","minWidth","resetState","student"],"mappings":";;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAcA,OAAOA,KAAP,IAAgBC,SAAhB,EAA2BC,QAA3B,QAA2C,OAA3C;AACA,SAASC,MAAT,EAAiBC,KAAjB,EAAwBC,WAAxB,EAAqCC,SAArC,QAAsD,YAAtD;AACA,OAAOC,cAAP,MAA2B,kBAA3B;;;AAEA,MAAMC,eAAN,SAA8BP,SAA9B,CAAwC;AAAA;AAAA;AAAA,SACtCQ,KADsC,GAC9B;AACNC,MAAAA,KAAK,EAAE;AADD,KAD8B;;AAAA,SAKtCC,MALsC,GAK7B,MAAM;AACb,WAAKC,QAAL,CAAcC,QAAQ,KAAK;AACzBH,QAAAA,KAAK,EAAE,CAACG,QAAQ,CAACH;AADQ,OAAL,CAAtB;AAGD,KATqC;AAAA;;AAWtCI,EAAAA,MAAM,GAAG;AACP,UAAMC,MAAM,GAAG,KAAKC,KAAL,CAAWD,MAA1B;AAEA,QAAIE,KAAK,GAAG,iBAAZ;;AACA,QAAIC,MAAM,gBAAG,QAAC,MAAD;AAAQ,MAAA,OAAO,EAAE,KAAKP,MAAtB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YAAb;;AACA,QAAII,MAAJ,EAAY;AACVE,MAAAA,KAAK,GAAG,sBAAR;AAEAC,MAAAA,MAAM,gBACJ,QAAC,MAAD;AACE,QAAA,KAAK,EAAC,SADR;AAEE,QAAA,SAAS,EAAC,aAFZ;AAGE,QAAA,OAAO,EAAE,KAAKP,MAHhB;AAIE,QAAA,KAAK,EAAE;AAAEQ,UAAAA,QAAQ,EAAE;AAAZ,SAJT;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cADF;AAUD;;AAED,wBACE,QAAC,QAAD;AAAA,iBACGD,MADH,eAEE,QAAC,KAAD;AAAO,QAAA,MAAM,EAAE,KAAKT,KAAL,CAAWC,KAA1B;AAAiC,QAAA,MAAM,EAAE,KAAKC,MAA9C;AAAA,gCACE,QAAC,WAAD;AAAa,UAAA,MAAM,EAAE,KAAKA,MAA1B;AAAA,oBAAmCM;AAAnC;AAAA;AAAA;AAAA;AAAA,gBADF,eAGE,QAAC,SAAD;AAAA,iCACE,QAAC,cAAD;AACE,YAAA,UAAU,EAAE,KAAKD,KAAL,CAAWI,UADzB;AAEE,YAAA,MAAM,EAAE,KAAKT,MAFf;AAGE,YAAA,OAAO,EAAE,KAAKK,KAAL,CAAWK;AAHtB;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,gBAHF;AAAA;AAAA;AAAA;AAAA;AAAA,cAFF;AAAA;AAAA;AAAA;AAAA;AAAA,YADF;AAgBD;;AA/CqC;;AAkDxC,eAAeb,eAAf","sourcesContent":["/*\r\nthe only state prop we’re creating is the modal’s state in order to check whether it must be \r\nopen or closed.\r\n\r\nThe toggle function (the one our form receives as param) will switch the current modal’s value \r\nto the opposite every time it’s called.\r\n\r\nIn the render function, we’re first checking if a create boolean was passed as param from the \r\nparent caller to decide if the button is for editing or creating action.\r\n\r\nThe buttons are created dynamically depending on what the parent said to us.\r\n\r\nThen, the Modal component can be mounted upon these conditions further down. Pay attention to \r\nwhere we’re placing the <NewStudentForm /> component. \r\n\r\n\r\n\r\n\r\n\r\n*/\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\nimport React, { Component, Fragment } from \"react\";\r\nimport { Button, Modal, ModalHeader, ModalBody } from \"reactstrap\";\r\nimport NewStudentForm from \"./NewStudentForm\";\r\n\r\nclass NewStudentModal extends Component {\r\n  state = {\r\n    modal: false\r\n  };\r\n\r\n  toggle = () => {\r\n    this.setState(previous => ({\r\n      modal: !previous.modal\r\n    }));\r\n  };\r\n\r\n  render() {\r\n    const create = this.props.create;\r\n\r\n    var title = \"Editing Student\";\r\n    var button = <Button onClick={this.toggle}>Edit</Button>;\r\n    if (create) {\r\n      title = \"Creating New Student\";\r\n\r\n      button = (\r\n        <Button\r\n          color=\"primary\"\r\n          className=\"float-right\"\r\n          onClick={this.toggle}\r\n          style={{ minWidth: \"200px\" }}\r\n        >\r\n          Create New\r\n        </Button>\r\n      );\r\n    }\r\n\r\n    return (\r\n      <Fragment>\r\n        {button}\r\n        <Modal isOpen={this.state.modal} toggle={this.toggle}>\r\n          <ModalHeader toggle={this.toggle}>{title}</ModalHeader>\r\n\r\n          <ModalBody>\r\n            <NewStudentForm\r\n              resetState={this.props.resetState}\r\n              toggle={this.toggle}\r\n              student={this.props.student}\r\n            />\r\n          </ModalBody>\r\n        </Modal>\r\n      </Fragment>\r\n    );\r\n  }\r\n}\r\n\r\nexport default NewStudentModal;"]},"metadata":{},"sourceType":"module"}