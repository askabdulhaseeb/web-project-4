{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\einst\\\\Documents\\\\frontend\\\\src\\\\components\\\\NewStudentForm.js\";\n\n/*\r\n\r\nHere, we have some important things going on:\r\n\r\nIn the first lines, we’re importing the reactstrap components for the first time including \r\nForm, Button, etc, which will comprise our form.\r\n\r\nThen, we created our state object with the corresponding properties of our Student’s model. \r\nThis is going to be useful to manipulate each prop individually.\r\n\r\nThe componentDidMount function is from react lifecycle and will run after the component \r\nfinishes its startup, so we can recover the student’s props from the parent component \r\n(this.props) here, and set the state with them (if they exist, for the editing scenario.)\r\n\r\nThe onChange function will handle the update of each state’s prop with the current value \r\ntyped in each respective field\r\n\r\nThe createStudent function will deal with the HTTP POST requests of our form. Every time we \r\npress the submit button, this function will be called, triggering the axios’ post() function \r\nand passing the current state in the request’s body. Once it’s completed, we’ll call the props \r\nfunctions resetState (to refresh the table) and toggle (to close the modal), they’ll be created \r\nfurther\r\n\r\neditStudent function works almost like the previous one, but calling our PUT operation\r\n\r\nThe defaultIfEmpty function was created as a random function that’ll check the current value of \r\neach field in order to determine if they’re going to be filled with the value of the state \r\n(in case any exists, for editing) or not (when creating a new student)\r\n\r\nThe render function will just compose our form with the help of reactstrap components. Nothing \r\nspecial here, except for the onSubmit property, which checks for a props’ property called \r\nstudents: if it does exist, the submit function will be for editing (the value was passed by \r\nthe parent component); otherwise, it’s for creation.\r\n\r\n\r\n*/\nimport React from \"react\";\nimport { Button, Form, FormGroup, Input, Label } from \"reactstrap\";\nimport axios from \"axios\";\nimport { API_URL } from \"../constants\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nclass NewStudentForm extends React.Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      pk: 0,\n      firstName: \"\",\n      lastName: \"\",\n      registrationDate: \"\"\n    };\n\n    this.onChange = e => {\n      this.setState({\n        [e.target.name]: e.target.value\n      });\n    };\n\n    this.createStudent = e => {\n      e.preventDefault();\n      axios.post(API_URL, this.state).then(() => {\n        this.props.resetState();\n        this.props.toggle();\n      });\n    };\n\n    this.editStudent = e => {\n      e.preventDefault();\n      axios.put(API_URL + this.state.pk, this.state).then(() => {\n        this.props.resetState();\n        this.props.toggle();\n      });\n    };\n\n    this.defaultIfEmpty = value => {\n      return value === \"\" ? \"\" : value;\n    };\n  }\n\n  componentDidMount() {\n    if (this.props.student) {\n      const {\n        pk,\n        firstName,\n        lastName,\n        registrationDate\n      } = this.props.student;\n      this.setState({\n        pk,\n        firstName,\n        lastName,\n        registrationDate\n      });\n    }\n  }\n\n  render() {\n    return /*#__PURE__*/_jsxDEV(Form, {\n      onSubmit: this.props.student ? this.editStudent : this.createStudent,\n      children: [/*#__PURE__*/_jsxDEV(FormGroup, {\n        children: [/*#__PURE__*/_jsxDEV(Label, {\n          for: \"firstName\",\n          children: \"First Name:\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 99,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Input, {\n          type: \"text\",\n          name: \"firstName\",\n          onChange: this.onChange,\n          value: this.defaultIfEmpty(this.state.firstName)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 100,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 98,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(FormGroup, {\n        children: [/*#__PURE__*/_jsxDEV(Label, {\n          for: \"lastName\",\n          children: \"Last Name:\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 108,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Input, {\n          type: \"text\",\n          name: \"lastName\",\n          onChange: this.onChange,\n          value: this.defaultIfEmpty(this.state.lastName)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 109,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 107,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(FormGroup, {\n        children: [/*#__PURE__*/_jsxDEV(Label, {\n          for: \"registrationDate\",\n          children: \"Registration Date:\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 117,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Input, {\n          type: \"date\",\n          name: \"registrationDate\",\n          onChange: this.onChange,\n          value: this.defaultIfEmpty(this.state.registrationDate)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 118,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 116,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Button, {\n        children: \"Submit\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 125,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 97,\n      columnNumber: 7\n    }, this);\n  }\n\n}\n\nexport default NewStudentForm;","map":{"version":3,"sources":["C:/Users/einst/Documents/frontend/src/components/NewStudentForm.js"],"names":["React","Button","Form","FormGroup","Input","Label","axios","API_URL","NewStudentForm","Component","state","pk","firstName","lastName","registrationDate","onChange","e","setState","target","name","value","createStudent","preventDefault","post","then","props","resetState","toggle","editStudent","put","defaultIfEmpty","componentDidMount","student","render"],"mappings":"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","sourcesContent":["/*\r\n\r\nHere, we have some important things going on:\r\n\r\nIn the first lines, we’re importing the reactstrap components for the first time including \r\nForm, Button, etc, which will comprise our form.\r\n\r\nThen, we created our state object with the corresponding properties of our Student’s model. \r\nThis is going to be useful to manipulate each prop individually.\r\n\r\nThe componentDidMount function is from react lifecycle and will run after the component \r\nfinishes its startup, so we can recover the student’s props from the parent component \r\n(this.props) here, and set the state with them (if they exist, for the editing scenario.)\r\n\r\nThe onChange function will handle the update of each state’s prop with the current value \r\ntyped in each respective field\r\n\r\nThe createStudent function will deal with the HTTP POST requests of our form. Every time we \r\npress the submit button, this function will be called, triggering the axios’ post() function \r\nand passing the current state in the request’s body. Once it’s completed, we’ll call the props \r\nfunctions resetState (to refresh the table) and toggle (to close the modal), they’ll be created \r\nfurther\r\n\r\neditStudent function works almost like the previous one, but calling our PUT operation\r\n\r\nThe defaultIfEmpty function was created as a random function that’ll check the current value of \r\neach field in order to determine if they’re going to be filled with the value of the state \r\n(in case any exists, for editing) or not (when creating a new student)\r\n\r\nThe render function will just compose our form with the help of reactstrap components. Nothing \r\nspecial here, except for the onSubmit property, which checks for a props’ property called \r\nstudents: if it does exist, the submit function will be for editing (the value was passed by \r\nthe parent component); otherwise, it’s for creation.\r\n\r\n\r\n*/\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\nimport React from \"react\";\r\nimport { Button, Form, FormGroup, Input, Label } from \"reactstrap\";\r\n\r\nimport axios from \"axios\";\r\n\r\nimport { API_URL } from \"../constants\";\r\n\r\nclass NewStudentForm extends React.Component {\r\n  state = {\r\n    pk: 0,\r\n    firstName: \"\",\r\n    lastName: \"\",\r\n    registrationDate: \"\",\r\n  };\r\n\r\n  componentDidMount() {\r\n    if (this.props.student) {\r\n      const { pk, firstName, lastName, registrationDate } = this.props.student;\r\n      this.setState({ pk, firstName, lastName, registrationDate });\r\n    }\r\n  }\r\n\r\n  onChange = e => {\r\n    this.setState({ [e.target.name]: e.target.value });\r\n  };\r\n\r\n  createStudent = e => {\r\n    e.preventDefault();\r\n    axios.post(API_URL, this.state).then(() => {\r\n      this.props.resetState();\r\n      this.props.toggle();\r\n    });\r\n  };\r\n\r\n  editStudent = e => {\r\n    e.preventDefault();\r\n    axios.put(API_URL + this.state.pk, this.state).then(() => {\r\n      this.props.resetState();\r\n      this.props.toggle();\r\n    });\r\n  };\r\n\r\n  defaultIfEmpty = value => {\r\n    return value === \"\" ? \"\" : value;\r\n  };\r\n\r\n  render() {\r\n    return (\r\n      <Form onSubmit={this.props.student ? this.editStudent : this.createStudent}>\r\n        <FormGroup>\r\n          <Label for=\"firstName\">First Name:</Label>\r\n          <Input\r\n            type=\"text\"\r\n            name=\"firstName\"\r\n            onChange={this.onChange}\r\n            value={this.defaultIfEmpty(this.state.firstName)}\r\n          />\r\n        </FormGroup>\r\n        <FormGroup>\r\n          <Label for=\"lastName\">Last Name:</Label>\r\n          <Input\r\n            type=\"text\"\r\n            name=\"lastName\"\r\n            onChange={this.onChange}\r\n            value={this.defaultIfEmpty(this.state.lastName)}\r\n          />\r\n        </FormGroup>\r\n        <FormGroup>\r\n          <Label for=\"registrationDate\">Registration Date:</Label>\r\n          <Input\r\n            type=\"date\"\r\n            name=\"registrationDate\"\r\n            onChange={this.onChange}\r\n            value={this.defaultIfEmpty(this.state.registrationDate)}\r\n          />\r\n        </FormGroup>\r\n        <Button>Submit</Button>\r\n      </Form>\r\n    );\r\n  }\r\n}\r\n\r\nexport default NewStudentForm;"]},"metadata":{},"sourceType":"module"}